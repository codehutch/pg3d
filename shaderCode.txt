======================================================

simple cel shader 1

uniform vec3 diffuse;
uniform float steps;
uniform float intensity;
varying vec3 vPos;
varying vec3 vNormal;
uniform vec3 pointLightColor[MAX_POINT_LIGHTS];
uniform vec3 pointLightPosition[MAX_POINT_LIGHTS];
uniform float pointLightDistance[MAX_POINT_LIGHTS];

void main() {
  vec3 n = normalize(vNormal);
  float i = intensity;
  for(int l = 0; l < MAX_POINT_LIGHTS; l++) {
    vec3 lightDirection = normalize(vPos - pointLightPosition[l]);
    i += dot(vec3(-lightDirection),n);
  }
  i = ceil(i * steps)/steps;
  gl_FragColor = vec4(diffuse, 1.0) + vec4(i);
}
  
  =======================================
  
  simple cel shader 2, possibly not as good
  
uniform vec3 diffuse;
uniform float steps;
varying vec3 vPos;
varying vec3 vNormal;
uniform vec3 pointLightColor[MAX_POINT_LIGHTS];
uniform vec3 pointLightPosition[MAX_POINT_LIGHTS];
uniform float pointLightDistance[MAX_POINT_LIGHTS];

void main() {
  vec3 n = normalize(vNormal);
  float intensity = 0.0;
  vec3 col = vec3(0.0);
  for(int l = 0; l < MAX_POINT_LIGHTS; l++) {
    vec3 lightDirection = normalize(vPos - pointLightPosition[l]);
    col += clamp(dot(-lightDirection, n), 0.0, 1.0) * pointLightColor[l];
  }
  intensity = ceil(clamp(col.r + col.g + col.b, 0.0, 1.0) * steps)/steps;
  gl_FragColor = vec4(diffuse, 1.0) + vec4(intensity);
}
  
==============================================  